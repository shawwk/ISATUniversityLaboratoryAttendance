@page "/teacher/profile"
@using System.Transactions
@inject ITeacherService teacherService
@inject IClassScheduleService classScheduleService
@inject IUserService userService
@inject ISnackbar SnackBar
@inject Blazored.SessionStorage.ISessionStorageService session

<div class="container">
    <div class="col-lg-2 col-md-12">
        @if (!disable)
        {
            <button class="btn btn-danger mb-2" @onclick='(()=> disable=true)'>Cancel</button>
            <button class="btn btn-primary mb-2" @onclick='(()=> UpdateTeacher())'>Save</button>
        }
        else
        {
            <button class="btn btn-success mb-2" @onclick='(()=> disable=false)'>Edit</button>
        }
    </div>
    <MudCard id="profile" class="p-2" Elevation="3">
        <span class="fs-5 p-3 font-monospace text-muted">Profile</span>
        <div class="row mb-4 p-4">
            <div class="col-lg-4">
                <div class="mb-3">
                    <label for="emp-id" class="col-form-label">Employee ID:</label>
                    <input id="emp-id" class="form-control" disabled="true" @bind-value="@teacher.EmployeeId" />
                </div>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <label for="f-name" class="col-form-label">Firstname:</label>
                    <input id="f-name" class="form-control" disabled="@disable" @bind-value="@teacher.FirstName" />
                </div>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <label for="m-name" class="col-form-label">Midllename:</label>
                    <input id="m-name" class="form-control" disabled="@disable" @bind-value="@teacher.MiddleName" />
                </div>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <label for="l-name" class="col-form-label">Lastname:</label>
                    <input id="l-name" class="form-control" disabled="@disable" @bind-value="@teacher.LastName" />
                </div>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <span for="recipient-name" class="col-form-label">Gender:</span>
                    <MudSelect @bind-Value="gender" disabled="@disable">
                        @foreach (Enums.Gender item in Enum.GetValues(typeof(Enums.Gender)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="mb-3">
                    <span for="recipient-name" class="col-form-label">Birth Date:</span>
                    <MudDatePicker @bind-Date="bday" disabled="@disable" />
                </div>
            </div>
        </div>
    </MudCard>
    <div id="tblSchedule" class="m-auto mt-4">
        <MudTable Items="handleSubject" Dense=true Striped=true Hover=true Bordered=true>
            <ToolBarContent>
                <MudText Typo="Typo.h6" class="text-muted">Subject Handle</MudText>
                <MudSpacer />
                <MudTextField Placeholder="Search" @bind-Value="searchString" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <col width="30%" />
            </ColGroup>
            <HeaderContent>
                <MudTh>Subject</MudTh>
                <MudTh>Course & Year</MudTh>
                <MudTh>Time</MudTh>
                <MudTh>Room</MudTh>
                <MudTh>Day</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Subject">@context.SubjectName</MudTd>
                <MudTd DataLabel="Course & Year">@context.Course @context.SectionName</MudTd>
                <MudTd DataLabel="Time">@DateTime.Today.Add(context.TimeFrom).ToShortTimeString() - @DateTime.Today.Add(context.TimeTo).ToShortTimeString()</MudTd>
                <MudTd DataLabel="Room">@Common.GetEnumDescription(context.Room)</MudTd>
                <MudTd DataLabel="Day">@context.Day</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>
</div>
<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Are you sure to reset account username/password to default?
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary">Reset</MudButton>
    </YesButton>
</MudMessageBox>
<MudMessageBox @ref="dbox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Are you sure to deactivate account?
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error">Deactivate</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    Teacher teacher = new Teacher();
    List<Teacher> teachers = new List<Teacher>();
    List<Schedule> handleSubject = new List<Schedule>();
    DateTime? bday = DateTime.Today;

    Enums.Gender gender { get; set; }
    MudMessageBox mbox { get; set; }
    MudMessageBox dbox { get; set; }

    string searchString = "";
    bool open = false;
    bool disable = true;
    Users currentUser = new();
    protected override void OnInitialized()
    {
        //LoadAllTeachers();
        //GetTeacher();
        //ListOfHandleSubject();
        base.OnInitialized();
    }
    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            currentUser = await session.GetItemAsync<Users>("currentUser");
            LoadAllTeachers();
            GetTeacher();
            ListOfHandleSubject();
            StateHasChanged();
            //message = "Executed for the first render.";
        }
        else
        {
            //message = "Executed after the first render.";
        }
    }

    public List<Teacher> LoadAllTeachers()
    {
        teachers = teacherService.GetAllTeacher();
        return teachers;
    }
    private void UpdateTeacher()
    {
        try
        {
            if (!RemoveSpecialCharacters(teacher))
            {
                teacher.Gender = gender;
                teacher.BirthDate = bday.GetValueOrDefault();
                var teacher1 = teacherService.UpdateTeacher(teacher);
                teachers.RemoveAll(x => x.Id == teacher1.Id);
                teachers.Add(teacher1);
                Common.ShowAlert("Updated successfully", Severity.Success, SnackBar);
                disable = true;
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    private bool FilterFunc1(Teacher teacher) => FilterFunc(teacher, searchString);
    private bool FilterFunc(Teacher teacher, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (teacher.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (teacher.MiddleName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (teacher.LastName.Contains(searchString))
            return true;
        return false;
    }
    private void GetTeacher()
    {
        var teach = teacherService.GetTeacherByIdNumber(Convert.ToInt64(currentUser.IDNumber));
        teacher = teach;
        gender = teach.Gender;
        bday = teach.BirthDate;
    }

    private async void ShowMessageBox(Teacher teacher)
    {
        bool? result = await mbox.Show();
        if (result != null)
        {
            try
            {
                var user = userService.GetUserById(Convert.ToInt64((string)teacher.EmployeeId));
                user.UserName = teacher.FirstName.ToLower() + '.' + teacher.LastName.ToLower();
                user.Password = "temporary1234";
                var account = userService.ResetAccount(user);
                //if(account != null)
                Common.ShowAlert("Account reset successfully!", Severity.Success, SnackBar);
            }
            catch (Exception ex)
            {
                Common.ShowAlert(ex.ToString(), Severity.Error, SnackBar);
            }
        }
        StateHasChanged();
    }
    private async void DeactivateAccount(Teacher teacher)
    {
        bool? result = await dbox.Show();
        if (result != null)
        {
            try
            {
                var user = userService.GetUserById(Convert.ToInt64((string)teacher.EmployeeId));
                teacherService.DeactivateTeacher(teacher);
                userService.DeactivateUser(user);
                teachers.RemoveAll(x => x.Id == teacher.Id);
                StateHasChanged();
                Common.ShowAlert("Account deactivated successfully!", Severity.Success, SnackBar);
            }
            catch (Exception ex)
            {
                Common.ShowAlert(ex.ToString(), Severity.Error, SnackBar);
            }
        }
    }
    private void ListOfHandleSubject()
    {
        handleSubject = classScheduleService.GetScheduleByTeacherId(Convert.ToInt64(currentUser.UserId));
    }
    public bool RemoveSpecialCharacters(Teacher input)
    {
        Regex r = new Regex(
                      "(?:[^a-zA-Z0-9 ]|(?<=['\"])s)",
                      RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.Compiled);
        //return r.Replace(input, String.Empty);
        if (r.IsMatch(input.FirstName.Replace(".", " ")))
        { Common.ShowAlert("First name: Special characters are not allowed!", Severity.Error, SnackBar); return true; }
        else if (r.IsMatch(input.MiddleName.Replace(".", " ")))
        { Common.ShowAlert("Middle name: Special characters are not allowed!", Severity.Error, SnackBar); return true; }
        else if (r.IsMatch(input.LastName))
        { Common.ShowAlert("Last name: Special characters are not allowed!", Severity.Error, SnackBar); return true; }
        else
            return false;
    }

}
